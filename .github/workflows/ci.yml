name: CI
on: [push, pull_request]
env:
  OPENRCT2_BUILD_SERVER: GitHub
  OPENRCT2_VERSION: 0.3.0
jobs:
  lint-commit:
    name: Lint Commit Message
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Lint Commit Messages
        uses: wagoid/commitlint-github-action@v1
        with:
          configFile: .commitlint.json
  check-code-formatting:
    name: Check code formatting
    runs-on: ubuntu-latest
    container:
      image: openrct2/openrct2-build:0.2.4-format
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Run clang-format
        run: scripts/check-code-formatting
  windows:
    name: Windows
    runs-on: windows-latest
    needs: [check-code-formatting]
    strategy:
      fail-fast: false
      matrix:
        platform: [win32, x64]
    env:
      CONFIGURATION: Release
      PLATFORM: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Build OpenRCT2
        shell: bash
        run: . scripts/setenv && build
      - name: Build artifacts
        shell: bash
        run: |
          . scripts/setenv -q
          build-portable
          build-symbols
          build-installer -i
      - name: Upload artifacts (CI)
        uses: actions/upload-artifact@v2-preview
        with:
          name: "OpenRCT2-Windows-${{ matrix.platform }}"
          path: artifacts/*
      - name: Run Tests
        shell: bash
        run: . scripts/setenv -q && run-tests
  windows-mingw:
    name: Windows (win32) using mingw
    runs-on: ubuntu-latest
    needs: [check-code-formatting]
    container:
      image: openrct2/openrct2-build:0.2.4-mingw
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build OpenRCT2
        run: |
          sudo su
          mkdir bin && cd bin
          cmake .. -G Ninja -DCMAKE_TOOLCHAIN_FILE=../CMakeLists_mingw.txt -DCMAKE_BUILD_TYPE=MinSizeRel -DDISABLE_IPO=on -DFORCE32=on -DBUILD_SHARED_LIBS=ON -DENABLE_SCRIPTING=OFF
          ninja -k0
  macos:
    name: macOS
    runs-on: macos-latest
    needs: [check-code-formatting]
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Build OpenRCT2
        run: |
          . scripts/setenv
          xcodebuild -configuration Release
          mkdir -p artifacts
          mv build/Release/OpenRCT2.app artifacts
          echo -e "\033[0;36mCompressing OpenRCT2.app...\033[0m"
          cd artifacts
          zip -rq openrct2-macos.zip OpenRCT2.app
      - name: Upload artifacts (CI)
        uses: actions/upload-artifact@v2-preview
        with:
          name: "OpenRCT2-macOS"
          path: artifacts/openrct2-macos.zip
  linux-portable:
    name: Linux (x64, portable)
    runs-on: ubuntu-latest
    needs: [check-code-formatting]
    container:
      image: openrct2/openrct2-build:0.2.4-bionic
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Get pre-reqs
        shell: bash
        run: . scripts/setenv && get-discord-rpc
      - name: Build OpenRCT2
        shell: bash
        run: . scripts/setenv -q && build -DWITH_TESTS=on -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_SHARED_LIBS=ON -DPORTABLE=ON -DCMAKE_POSITION_INDEPENDENT_CODE=on -DCMAKE_CXX_FLAGS="-g -gz"
      - name: Build artifacts
        shell: bash
        run: . scripts/setenv -q && build-portable artifacts/OpenRCT2-Linux-x86_64.tar.gz bin/install/usr
      - name: Upload artifacts (CI)
        uses: actions/upload-artifact@v1
        with:
          name: "OpenRCT2-Linux-x86_64"
          path: artifacts
      - name: Run Tests
        shell: bash
        run: . scripts/setenv -q && run-tests
  linux-portable-32:
    name: Linux (i686, portable)
    runs-on: ubuntu-latest
    needs: [check-code-formatting]
    container:
      image: openrct2/openrct2-build:0.2.4-bionic32
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Get pre-reqs
        shell: bash
        run: . scripts/setenv && get-discord-rpc
      - name: Build OpenRCT2
        shell: bash
        env:
          TESTPAINT: true
        run: . scripts/setenv -q && build -DWITH_TESTS=on -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_SHARED_LIBS=ON -DPORTABLE=ON -DFORCE32=ON -DENABLE_SCRIPTING=OFF -DCMAKE_CXX_FLAGS="-m32 -gz"
      - name: Build artifacts
        shell: bash
        run: . scripts/setenv -q && build-portable artifacts/OpenRCT2-Linux-i686.tar.gz bin/install/usr
      - name: Upload artifacts (CI)
        uses: actions/upload-artifact@v1
        with:
          name: "OpenRCT2-Linux-i686"
          path: artifacts
      - name: Run Tests
        shell: bash
        run: . scripts/setenv -q && run-tests
      - name: Run testpaint
        shell: bash
        run: . scripts/setenv -q && run-testpaint
  linux-appimage:
    name: Linux (x64, AppImage)
    runs-on: ubuntu-latest
    needs: [check-code-formatting]
    container:
      image: openrct2/openrct2-build:0.2.4-bionic
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Get pre-reqs
        shell: bash
        run: . scripts/setenv -q && get-discord-rpc
      - name: Build OpenRCT2
        shell: bash
        run: . scripts/setenv -q && build -DCMAKE_BUILD_TYPE=Release -DAPPIMAGE=ON
      - name: Build AppImage
        shell: bash
        run: . scripts/setenv -q && build-appimage
      - name: Upload artifacts (CI)
        uses: actions/upload-artifact@v1
        with:
          name: OpenRCT2-AppImage
          path: artifacts